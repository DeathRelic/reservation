<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
	<!-- 以下为shiro需要的配置项 -->
	<!-- 进行缓存的操作配置 -->
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
	</bean>
	<!-- 配置SecurityManager的管理 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- 配置你需要使用的Realms -->
		<property name="realm" ref="loginRealm"/>
		<!-- 配置需要的缓存设置 -->
		<property name="cacheManager" ref="cacheManager"/>
		<!-- 配置session管理器 -->
		<property name="sessionManager" ref="sessionManager"></property>
	</bean>
	<bean id="formAuthenticationFilter" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
		<property name="usernameParam" value="username" />
		<property name="passwordParam" value="password" />
		<property name="loginUrl" value="/loginUrl.action" />
	</bean>

	<!-- 配置shiro过滤器 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- 表示现在要配置的是一个安全管理器 -->
		<property name="securityManager" ref="securityManager"/>
		<!-- 出现错误之后的跳转路径的配置 -->
		<property name="loginUrl" value="/loginUrl.action"/>
		<!-- 认证失败之后的跳转路径页面 -->
		<property name="unauthorizedUrl" value="/unauthUrl.action"/>
		<!-- 登录成功之后的跳转访问路径 -->
		<property name="successUrl" value="/successUrl.action"/>
		<!-- shiro里面需要针对于所有的路径进行配置，所有的配置需要通过文本的形式设置 -->
		<property name="filters">
			<map>
				<entry key="authc" value-ref="formAuthenticationFilter"/>
			</map>
		</property>
		<property name="filterChainDefinitions">
			<value>
				/loginUrl.action=authc
				/role.jsp=anon,roles[member]
				/**=authc
			</value>
		</property>
	</bean>
	
	<!-- 配置Shiro在Spring中的生命周期的控制操作 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
	<!-- 配置sessionid生成器 -->
	<bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.SessionIdGenerator"/>
	<!-- 定义会话保存处理 -->
	<bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
		<property name="activeSessionCacheName" value="shiroCache"/>
		<property name="sessionIdGenerator" ref="sessionIdGenerator"/>
	</bean>
	<!-- 定位Cookie操作模板 -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<!-- Tomcat默认cookie名字为jsessionid -->
		<constructor-arg value="customCookie"/>
		<property name="httpOnly" value="true"/>
		<property name="maxAge" value="-1"/>
	</bean>
	<!-- 定义会话管理器 -->
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!-- 定义的是全局的session会话超时时间，此操作会覆盖web.xml文件中的超时时间配置 -->
		<property name="globalSessionTimeout" value="1000000"/>
		<!-- 删除所有无效的Session对象，此时的session被保存在了内存里面 -->
		<property name="deleteInvalidSessions" value="true"/>
		<!-- 定义要使用的无效的Session定时调度器 -->
		<property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
		<!-- 需要让此session可以使用该定时调度器进行检测 -->
		<property name="sessionValidationSchedulerEnabled" value="true"/>
		<!-- 定义Session可以进行序列化的工具类 -->
		<property name="sessionDAO" ref="sessionDAO"/>
		<!-- 所有的session一定要将id设置到Cookie之中，需要提供有Cookie的操作模版 -->
		<property name="sessionIdCookie" ref="sessionIdCookie"/>
		<!-- 定义sessionIdCookie模版可以进行操作的启用 -->
		<property name="sessionIdCookieEnabled" value="true"/>
	</bean>
	
	<!-- 配置session的定时验证检测程序类，以让无效的session释放 -->
	<bean id="sessionValidationScheduler"
		class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
		<!-- 设置session的失效扫描间隔，单位为毫秒 -->
		<property name="sessionValidationInterval" value="100000"/>
		<!-- 随后还需要定义有一个会话管理器的程序类的引用 -->
		<property name="sessionManager" ref="sessionManager"/>
	</bean> 
	
	
</beans>